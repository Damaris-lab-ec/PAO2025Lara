using System;
using System.Collections.Generic;
using System.IO;

namespace VacunacionCOVID19
{
    class Program
    {
        // Semilla fija para que el muestreo sea reproducible
        const int Semilla = 271828;

        static void Main()
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;

            // ===== Requisito: Universo U con 500 ciudadanos =====
            List<string> universo = CrearUniverso(500); // "Ciudadano 1"... "Ciudadano 500"

            // ===== Requisito: 75 Pfizer (P) y 75 AstraZeneca (A) =====
            Random rng = new Random(Semilla);
            List<string> pfizer = MuestrearSinRepeticion(universo, 75, rng);
            List<string> astra  = MuestrearSinRepeticion(universo, 75, rng);

            // ===== Teoría de conjuntos =====
            // P ∩ A
            List<string> ambas = Interseccion(pfizer, astra);

            // P \ A
            List<string> soloPfizer = Diferencia(pfizer, astra);

            // A \ P
            List<string> soloAstra = Diferencia(astra, pfizer);

            // U \ (P ∪ A)
            List<string> unionPA = Union(pfizer, astra);
            List<string> noVacunados = Diferencia(universo, unionPA);

            // ===== Salida por consola =====
            ImprimirResumen("RESUMEN CAMPAÑA COVID-19", universo.Count, pfizer.Count, astra.Count,
                            ambas.Count, soloPfizer.Count, soloAstra.Count, noVacunados.Count);

            ImprimirLista("No vacunados (U \\ (P ∪ A))", noVacunados, 25);
            ImprimirLista("Ambas dosis (P ∩ A)", ambas, 25);
            ImprimirLista("Solo Pfizer (P \\ A)", soloPfizer, 25);
            ImprimirLista("Solo AstraZeneca (A \\ P)", soloAstra, 25);

            // ===== Exportación opcional a CSV =====
            string salida = Path.Combine(AppContext.BaseDirectory, "salida");
            Directory.CreateDirectory(salida);
            GuardarCSV(Path.Combine(salida, "01_NoVacunados.csv"), noVacunados);
            GuardarCSV(Path.Combine(salida, "02_AmbasDosis.csv"), ambas);
            GuardarCSV(Path.Combine(salida, "03_SoloPfizer.csv"), soloPfizer);
            GuardarCSV(Path.Combine(salida, "04_SoloAstraZeneca.csv"), soloAstra);
            GuardarResumenTXT(Path.Combine(salida, "Resumen.txt"), universo.Count, pfizer.Count, astra.Count,
                               ambas.Count, soloPfizer.Count, soloAstra.Count, noVacunados.Count);

            Console.WriteLine();
            Console.WriteLine("Archivos exportados en: " + salida);
            Console.WriteLine("Presione una tecla para salir...");
            Console.ReadKey();
        }

        // ----------------- Utilidades -----------------

        // Crea "Ciudadano 1" ... "Ciudadano n"
        static List<string> CrearUniverso(int n)
        {
            List<string> u = new List<string>(n);
            for (int i = 1; i <= n; i++)
                u.Add("Ciudadano " + i);
            return u;
        }

        // Muestreo aleatorio sin repetición a partir de baseLista
        static List<string> MuestrearSinRepeticion(List<string> baseLista, int cantidad, Random rng)
        {
            if (cantidad < 0 || cantidad > baseLista.Count)
                throw new ArgumentException("Cantidad de muestra inválida.");

            List<string> muestra = new List<string>(cantidad);
            HashSet<int> usados = new HashSet<int>(); // solo para índices, evita repetidos
            while (muestra.Count < cantidad)
            {
                int idx = rng.Next(0, baseLista.Count);
                if (!usados.Contains(idx))
                {
                    usados.Add(idx);
                    muestra.Add(baseLista[idx]);
                }
            }
            return muestra;
        }

        // Unión (sin duplicados)
        static List<string> Union(List<string> a, List<string> b)
        {
            List<string> r = new List<string>(a.Count + b.Count);
            // Agregar A
            for (int i = 0; i < a.Count; i++)
                if (!Contiene(r, a[i])) r.Add(a[i]);
            // Agregar B
            for (int i = 0; i < b.Count; i++)
                if (!Contiene(r, b[i])) r.Add(b[i]);
            return r;
        }

        // Intersección
        static List<string> Interseccion(List<string> a, List<string> b)
        {
            List<string> r = new List<string>();
            // Recorremos la más pequeña
            List<string> menor = (a.Count <= b.Count) ? a : b;
            List<string> mayor = (a.Count <= b.Count) ? b : a;

            for (int i = 0; i < menor.Count; i++)
                if (Contiene(mayor, menor[i])) r.Add(menor[i]);
            return r;
        }

        // Diferencia A \ B
        static List<string> Diferencia(List<string> a, List<string> b)
        {
            List<string> r = new List<string>();
            for (int i = 0; i < a.Count; i++)
                if (!Contiene(b, a[i])) r.Add(a[i]);
            return r;
        }

        // Contiene (búsqueda lineal)
        static bool Contiene(List<string> lista, string valor)
        {
            for (int i = 0; i < lista.Count; i++)
                if (lista[i] == valor) return true;
            return false;
        }

        // Salidas
        static void ImprimirResumen(string titulo, int totalU, int totalP, int totalA,
                                    int totalInter, int totalSoloP, int totalSoloA, int totalNoVac)
        {
            Console.WriteLine("===================================================");
            Console.WriteLine(titulo);
            Console.WriteLine("===================================================");
            Console.WriteLine($"Total ciudadanos (U):             {totalU}");
            Console.WriteLine($"Vacunados Pfizer (P):             {totalP}");
            Console.WriteLine($"Vacunados AstraZeneca (A):        {totalA}");
            Console.WriteLine($"Ambas dosis (P ∩ A):              {totalInter}");
            Console.WriteLine($"Solo Pfizer (P \\ A):              {totalSoloP}");
            Console.WriteLine($"Solo AstraZeneca (A \\ P):         {totalSoloA}");
            Console.WriteLine($"No vacunados (U \\ (P ∪ A)):       {totalNoVac}");
            Console.WriteLine();
        }

        static void ImprimirLista(string titulo, List<string> datos, int maximo)
        {
            Console.WriteLine("---- " + titulo + $" (n={datos.Count}) ----");
            int limite = (datos.Count < maximo) ? datos.Count : maximo;
            for (int i = 0; i < limite; i++)
                Console.WriteLine($"  - {datos[i]}");
            if (datos.Count > maximo) Console.WriteLine("  ...");
            Console.WriteLine();
        }

        static void GuardarCSV(string ruta, List<string> datos)
        {
            using (var sw = new StreamWriter(ruta, false, System.Text.Encoding.UTF8))
            {
                sw.WriteLine("id,nombre");
                for (int i = 0; i < datos.Count; i++)
                {
                    // "Ciudadano X" -> X
                    string nombre = datos[i];
                    int id = ExtraerId(nombre);
                    sw.WriteLine(id + "," + nombre);
                }
            }
        }

        static int ExtraerId(string nombre)
        {
            // nombre = "Ciudadano <numero>"
            // buscamos el último espacio y parseamos lo que siga
            for (int i = nombre.Length - 1; i >= 0; i--)
            {
                if (nombre[i] == ' ')
                {
                    string sub = nombre.Substring(i + 1);
                    int val;
                    if (int.TryParse(sub, out val)) return val;
                    break;
                }
            }
            return -1;
        }

        static void GuardarResumenTXT(string ruta,
            int totalU, int totalP, int totalA,
            int totalInter, int totalSoloP, int totalSoloA, int totalNoVac)
        {
            using (var sw = new StreamWriter(ruta, false, System.Text.Encoding.UTF8))
            {
                sw.WriteLine("RESUMEN CAMPAÑA COVID-19 (Teoría de Conjuntos)");
                sw.WriteLine("----------------------------------------------");
                sw.WriteLine($"Total ciudadanos (U):             {totalU}");
                sw.WriteLine($"Vacunados Pfizer (P):             {totalP}");
                sw.WriteLine($"Vacunados AstraZeneca (A):        {totalA}");
                sw.WriteLine($"Ambas dosis (P ∩ A):              {totalInter}");
                sw.WriteLine($"Solo Pfizer (P \\ A):              {totalSoloP}");
                sw.WriteLine($"Solo AstraZeneca (A \\ P):         {totalSoloA}");
                sw.WriteLine($"No vacunados (U \\ (P ∪ A)):       {totalNoVac}");
                sw.WriteLine();
                sw.WriteLine("Definiciones:");
                sw.WriteLine("  - No vacunados = U \\ (P ∪ A)");
                sw.WriteLine("  - Ambas dosis  = P ∩ A");
                sw.WriteLine("  - Solo Pfizer  = P \\ A");
                sw.WriteLine("  - Solo Astra   = A \\ P");
            }
        }
    }
}
