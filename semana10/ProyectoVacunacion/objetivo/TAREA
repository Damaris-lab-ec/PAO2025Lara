// ===============================================
//  PROCESAMIENTO DE DATOS FICTICIOS DE VACUNACIÓN
//  - Sin using ni namespace en la cabecera.
//  - Top-level statements (C# 9+ / .NET 6+).
//  - Operaciones de teoría de conjuntos con HashSet<T>.
//  - Código ampliamente comentado.
// ===============================================

// -------------------------------
// 1) Parámetros configurables
// -------------------------------
int totalCiudadanos = 500;   // Tamaño del universo U
int totalPfizer     = 75;    // |P| = 75 (Pfizer, al menos 1 dosis)
int totalAstra      = 75;    // |A| = 75 (AstraZeneca, al menos 1 dosis)

// Porcentaje de personas con 1 dosis que recibirán 2da dosis (misma marca)
double porcentajeSegundaDosis = 0.60; // 60%

// Generador aleatorio para muestreos reproducibles (puedes fijar una seed si deseas)
// var rng = new System.Random(12345);
var rng = new System.Random();

// -------------------------------
// 2) Construir el universo U = { "Ciudadano 1", ..., "Ciudadano 500" }
// -------------------------------
var U = new System.Collections.Generic.List<string>(capacity: totalCiudadanos);
for (int i = 1; i <= totalCiudadanos; i++)
{
    U.Add("Ciudadano " + i);
}

// -------------------------------
// 3) Muestrear sin repetición los conjuntos base P (Pfizer) y A (Astra)
//    - Ambos se eligen del universo U
//    - No se permite repetir dentro de cada conjunto
// -------------------------------
var P = SampleDistinct(U, totalPfizer, rng); // Lista única de 75 ciudadanos Pfizer
var A = SampleDistinct(U, totalAstra,  rng); // Lista única de 75 ciudadanos Astra

// Convertimos a HashSet para operaciones de conjuntos en O(1) promedio
var setU = new System.Collections.Generic.HashSet<string>(U);
var setP = new System.Collections.Generic.HashSet<string>(P);
var setA = new System.Collections.Generic.HashSet<string>(A);

// -------------------------------
// 4) Registro de dosis por ciudadano
//    - Cada ciudadano puede tener 0, 1 o 2 dosis, pero solo de UNA marca.
//    - “Ambas dosis” = 2 dosis (misma marca).
// -------------------------------
var registro = new System.Collections.Generic.Dictionary<string, Vacunacion>(capacity: totalCiudadanos);

// Inicializamos el registro en 0 dosis
for (int i = 0; i < U.Count; i++)
{
    string c = U[i];
    registro[c] = new Vacunacion { Ciudadano = c, DosisPfizer = 0, DosisAstra = 0 };
}

// Asignamos 1ra dosis según pertenencia a P o A
foreach (var c in setP) { registro[c].DosisPfizer = 1; }
foreach (var c in setA) { registro[c].DosisAstra  = 1; }

// Determinar quiénes son elegibles a 2da dosis: exactamente una marca con 1 dosis
var elegiblesSegunda = new System.Collections.Generic.List<string>();
foreach (var kv in registro)
{
    bool tienePf1 = kv.Value.DosisPfizer == 1;
    bool tieneAs1 = kv.Value.DosisAstra  == 1;

    // XOR lógico sin usar LINQ: exactamente una de las dos marcas
    if ( (tienePf1 && !tieneAs1) || (!tienePf1 && tieneAs1) )
        elegiblesSegunda.Add(kv.Key);
}

// Cantidad a otorgar 2da dosis (redondeo comercial)
int totalSegunda = (int)System.Math.Round(
    elegiblesSegunda.Count * porcentajeSegundaDosis,
    System.MidpointRounding.AwayFromZero
);

// Seleccionar aleatoriamente quiénes reciben 2da dosis
var segundaDosisSeleccion = SampleDistinct(elegiblesSegunda, totalSegunda, rng);

// Asignar 2da dosis a la misma marca ya aplicada
for (int i = 0; i < segundaDosisSeleccion.Count; i++)
{
    var c = segundaDosisSeleccion[i];
    var v = registro[c];
    if (v.DosisPfizer == 1) v.DosisPfizer = 2;
    if (v.DosisAstra  == 1) v.DosisAstra  = 2;
}

// -------------------------------
// 5) Conjuntos pedidos por el enunciado (teoría de conjuntos)
//    - Vacunados ≥1 dosis = P ∪ A
//    - No vacunados       = U − (P ∪ A)
//    - Solo Pfizer        = P − A
//    - Solo AstraZeneca   = A − P
//    - Ambas dosis        = { c | dosisTotales(c) >= 2 } (misma marca)
// -------------------------------

// Vacunados ≥1 dosis = P ∪ A
var vacunadosAlMenosUna = new System.Collections.Generic.HashSet<string>(setP);
vacunadosAlMenosUna.UnionWith(setA);

// No vacunados = U − (P ∪ A)
var noVacunados = new System.Collections.Generic.HashSet<string>(setU);
noVacunados.ExceptWith(vacunadosAlMenosUna);

// Solo Pfizer = P − A
var soloPfizer = new System.Collections.Generic.HashSet<string>(setP);
soloPfizer.ExceptWith(setA);

// Solo AstraZeneca = A − P
var soloAstra = new System.Collections.Generic.HashSet<string>(setA);
soloAstra.ExceptWith(setP);

// Ambas dosis: recorremos el registro y añadimos quienes tengan 2 dosis (cualquiera de las marcas)
var ambasDosis = new System.Collections.Generic.HashSet<string>();
foreach (var kv in registro)
{
    if (kv.Value.DosisPfizer >= 2 || kv.Value.DosisAstra >= 2)
        ambasDosis.Add(kv.Key);
}

// -------------------------------
// 6) Salida por consola (resumen)
// -------------------------------
System.Console.WriteLine("=== Resumen (datos ficticios) ===");
System.Console.WriteLine("Total ciudadanos (U): " + setU.Count);
System.Console.WriteLine("Pfizer (P): " + setP.Count);
System.Console.WriteLine("AstraZeneca (A): " + setA.Count);
System.Console.WriteLine("Vacunados ≥1 dosis (P ∪ A): " + vacunadosAlMenosUna.Count);
System.Console.WriteLine("No vacunados (U − (P ∪ A)): " + noVacunados.Count);
System.Console.WriteLine("Solo Pfizer (P − A): " + soloPfizer.Count);
System.Console.WriteLine("Solo Astra (A − P): " + soloAstra.Count);
System.Console.WriteLine("Ambas dosis (2 dosis, misma marca): " + ambasDosis.Count);

// -------------------------------
// 7) Exportar listados a archivos .txt para revisión
// -------------------------------
System.IO.Directory.CreateDirectory("salidas");

// Guardamos los conjuntos en archivos ordenados alfabéticamente
WriteSetToFileSorted("salidas/no_vacunados.txt",      noVacunados);
WriteSetToFileSorted("salidas/ambas_dosis.txt",       ambasDosis);
WriteSetToFileSorted("salidas/solo_pfizer.txt",       soloPfizer);
WriteSetToFileSorted("salidas/solo_astrazeneca.txt",  soloAstra);

System.Console.WriteLine();
System.Console.WriteLine("Archivos generados en carpeta 'salidas/'.");
System.Console.WriteLine("Presiona una tecla para salir…");
System.Console.ReadKey();

// ========================================================================
//  FUNCIONES LOCALES (sin using; todo con nombres totalmente calificados)
// ========================================================================

/// <summary>
/// Selecciona 'count' elementos ÚNICOS de 'source' sin repetición (Fisher-Yates parcial).
/// </summary>
System.Collections.Generic.List<string> SampleDistinct(
    System.Collections.Generic.IEnumerable<string> source,
    int count,
    System.Random rngLocal)
{
    var list = new System.Collections.Generic.List<string>(source);

    if (count < 0) throw new System.ArgumentOutOfRangeException("count");
    if (count > list.Count) throw new System.ArgumentException("La muestra excede el tamaño del universo.");

    // Barajado parcial Fisher-Yates:
    // Intercambiamos posiciones para "traer" al frente 'count' elementos aleatorios
    for (int i = 0; i < count; i++)
    {
        int j = rngLocal.Next(i, list.Count);
        var tmp = list[i];
        list[i] = list[j];
        list[j] = tmp;
    }

    // Tomamos los 'count' primeros, que ahora son aleatorios y únicos
    var result = new System.Collections.Generic.List<string>(capacity: count);
    for (int k = 0; k < count; k++)
        result.Add(list[k]);

    return result;
}

/// <summary>
/// Escribe un conjunto a archivo de texto, ordenado alfabéticamente (sin LINQ).
/// </summary>
void WriteSetToFileSorted(string path, System.Collections.Generic.HashSet<string> set)
{
    // Convertimos HashSet a List para poder ordenar sin LINQ
    var list = new System.Collections.Generic.List<string>(set);

    // Ordenamiento alfabético simple (List<T>.Sort usa orden natural de string)
    list.Sort(System.StringComparer.Ordinal);

    // Escritura de todas las líneas
    System.IO.File.WriteAllLines(path, list);
}

// ===============================================
//  Clase simple para llevar el conteo de dosis
// ===============================================
class Vacunacion
{
    public string Ciudadano { get; set; } = "";
    public int DosisPfizer { get; set; }  // 0, 1 o 2 dosis (Pfizer)
    public int DosisAstra  { get; set; }  // 0, 1 o 2 dosis (AstraZeneca)
}
